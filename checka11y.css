/*! Checka11y.css v1.0.0-beta.0 | MIT License | github.com/jackdomleo7/Checka11y.css */
:root {
  /**
    * Colors
    * Colors are broken down into RGB and A variables to be combined for the main color
    */
  --text-error: #721c24;
  --bg-error: #ffc6c6;
  --border-error: #f00;
  --text-warning: #856404;
  --bg-warning: #ffffd8;
  --border-warning: #ff6;
  /* Scale */
  --space: 0.25rem;
  --space-0: calc(var(--space) * 0);
  --space-2: calc(var(--space) * 2);
  --space-4: calc(var(--space) * 4);
  --space-6: calc(var(--space) * 6);
}

/**
  * Base Styles
  * To use in SCSS with the @extend & @include command.
  */
img:not([alt]), iframe:not([title]), a audio[controls], a embed, a iframe, a img[usemap], a input:not([type="hidden"]), a object[usemap], a select, a textarea, a video[controls] {
  -webkit-box-shadow: 0 0 0 0.25rem var(--border-error);
          box-shadow: 0 0 0 0.25rem var(--border-error);
}

html:not([lang]) body::before, html[lang=""] body::before, ol > *:not(li)::after,
ul > *:not(li)::after, dl > *:not(dt):not(dd)::after, nav:not([aria-label]):not([aria-labelledby]) ~ nav::after,
nav ~ nav:not([aria-label]):not([aria-labelledby])::after, a button::after, a details::after, a label::after, a[target="_blank"]::after {
  display: block;
  font-size: 1.2rem;
  font-weight: 700;
  padding: var(--space-4) var(--space-6);
  border-radius: 0.75rem;
}

html:not([lang]) body::before, html[lang=""] body::before, ol > *:not(li)::after,
ul > *:not(li)::after, dl > *:not(dt):not(dd)::after, nav:not([aria-label]):not([aria-labelledby]) ~ nav::after,
nav ~ nav:not([aria-label]):not([aria-labelledby])::after, a button::after, a details::after, a label::after {
  color: var(--text-error);
  border: 0.4rem solid var(--border-error);
  background-color: var(--bg-error);
}

a[target="_blank"]::after {
  color: var(--text-warning);
  border: 0.4rem solid var(--border-warning);
  background-color: var(--bg-warning);
}

/* html element requires a lang attribute */
html:not([lang]) body::before {
  content: "ERROR: html has no lang attribute." !important;
}

/* html element lang attribute must not be empty */
html[lang=""] body::before {
  content: "ERROR: html lang attribute should not be empty." !important;
}

/* All images require an alt attribute */
/* All iframe must have title attribute */
/* All direct children of <ul> and <ol> must only be <li> */
ol > *:not(li)::after,
ul > *:not(li)::after {
  content: "ERROR: List markup invalid. Ensure <li> is the only direct child of <ul> or <ol>." !important;
}

/* All direct children of <dl> must only be <dt> or <dd> */
dl > *:not(dt):not(dd)::after {
  content: "ERROR: List markup invalid. Ensure that the only direct children of <dl> are <dt> and <dd>." !important;
}

/* If more than one primary navigation is available, all navigations must be clearly labelled. */
nav:not([aria-label]):not([aria-labelledby]) ~ nav::after,
nav ~ nav:not([aria-label]):not([aria-labelledby])::after {
  content: "ERROR: <nav> indicates the primary navigation for the page. In cases where multiple primary navigations exist, an aria-label or aria-labelledby attribute must be present on both <nav> tags." !important;
}

/* Warn when opening a link in a new tab or window */
a[target="_blank"]::after {
  content: "WARNING: Links that open in a new tab or window should be communicated to the user, ensure the user knows of this behavior." !important;
}

/* Invalid HTML nested inside <a> */
a button::after {
  content: "ERROR: Ensure that <button> is not a child of <a> as it is an invalid HTML." !important;
}

a details::after {
  content: "ERROR: Ensure that <details> is not a child of <a> as it is an invalid HTML." !important;
}

a label::after {
  content: "ERROR: Ensure that <label> is not a child of <a> as it is an invalid HTML." !important;
}
